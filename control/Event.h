#pragma once

// defines event: an object which holds what changed
// events are generated by physics && are passed to graphics && are applied

#include <memory>

#include "objects/GameField.h"
#include "view/GameRender.h"
#include "control/events/BaseEvent.h"

using std::unique_ptr;

class Event
{
	std::unique_ptr<BaseEvent> m_event;

public:
	Event(unique_ptr<BaseEvent>);
	Event(const Event&);

	// non-const reference because other ways are too hard. What have I become
	void execute_physics(GameField&) const;
	void execute_graphics(const GameField&, GameRender&) const;

	// tells whether the event wants graphics to be executed before physics
	bool graphics_first() const;
};

namespace Events
{
	Event add_wall(Coordinate x, Coordinate y, Block block);
	Event demote(const shared_ptr<GameObject>& object);
	Event destroy_wall(Coordinate x, Coordinate y);
	Event eat_point(Coordinate x, Coordinate y);
	Event move(const shared_ptr<GameObject>& obj, MoveDirection dir);
	Event nothing();
	Event promote(const shared_ptr<GameObject>& object);
}

// vim: tw=78
