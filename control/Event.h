#pragma once

// defines event: an object which holds what changed
// events are generated by physics && are passed to graphincs && are applied

#include <memory>
#include <vector>

#include "objects/AnimateObject.h"
#include "objects/MapConstants.h"
#include "objects/Block.h"
#include "control/MoveDirection.h"

using ObjectPtr = std::shared_ptr<AnimateObject>;

class Event
{
public:
	enum struct Type
	{
		Move,
		Kill,
		Promote,
		Demote,
		EatPoint,
		DestroyWall,
		AddWall,
		Nothing
	};
	// creators of specific events
	friend Event event_move(const MoveDirection&, const ObjectPtr&);
	friend Event event_kill(const ObjectPtr&);
	friend Event event_promote(const ObjectPtr&);
	friend Event event_demote(const ObjectPtr&);
	friend Event event_eat_point(const Coordinate&, const Coordinate&);
	friend Event event_destroy_wall(const Coordinate&, const Coordinate&);
	friend Event event_add_wall(const Coordinate&, const Coordinate&, const Block&);
	friend Event event_nothing();

	Event(const Type&, const ObjectPtr&, const Coordinate&,
	      const Coordinate&, const MoveDirection&, const Block&);
	Event(const Event&) = delete;
	Event(Event&&) = default;

	Type          get_type() const;
	ObjectPtr     get_object_argument() const;
	Coordinate    get_coordinate_argument_x() const;
	Coordinate    get_coordinate_argument_y() const;
	MoveDirection get_direction_argument() const;
	Block         get_block_argument() const;

private:
	Type          m_type;
	ObjectPtr     m_object_argument;
	Coordinate    m_coordinate_argument_x;
	Coordinate    m_coordinate_argument_y;
	MoveDirection m_direction_argument;
	Block         m_block_argument;
};


// vim: tw=78
