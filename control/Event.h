#pragma once

// defines event: an object which holds what changed
// events are generated by physics && are passed to graphics && are applied

#include <memory>

#include "objects/GameField.h"
#include "view/Render.h"
#include "control/events/BaseEvent.h"

using std::unique_ptr;

class Event
{
	std::unique_ptr<BaseEvent> m_event;

public:
	Event(unique_ptr<BaseEvent>);

	// non-const reference because other ways are too hard. What have I become
	void execute_physics(GameField&) const;
	void execute_graphics(const GameField&, Render&) const;

	// tells whether the event wants graphics to be executed before physics
	bool graphics_first() const;
};

// vim: tw=78
